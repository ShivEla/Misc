# -*- coding: utf-8 -*-
"""basics.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15A8yIYEaBcHoh1EcX1Ow0NV6Ybd4rWtF
"""

pip install networkx

import networkx as nx
import matplotlib.pyplot as plt
from pprint import pprint

G=nx.karate_club_graph()
nx.draw(G)
def metrics(G):
  metrics={}
  metrics['nodes']=G.number_of_nodes()
  metrics['edges']=G.number_of_edges()
  metrics['avg clustering']=nx.average_clustering(G)
  metrics['density']=nx.density(G)
  metrics['Degree centrality']=nx.degree_centrality(G)
  metrics['Betweeness centrality']=nx.betweenness_centrality(G)
  metrics['Closeness Centrality']=nx.closeness_centrality(G)
  if nx.is_connected(G):
        metrics['is_connected'] = True
        metrics['diameter'] = nx.diameter(G)
        metrics['avg_shortest_path'] = nx.average_shortest_path_length(G)
  else:
        metrics['is_connected'] = False
        metrics['num_components'] = nx.number_connected_components(G)
        # Analyze the largest component
        largest_cc = max(nx.connected_components(G), key=len)
        subgraph = G.subgraph(largest_cc)
        metrics['largest_component_diameter'] = nx.diameter(subgraph)
  return metrics
pprint(metrics(G))

import numpy as np
import collections
from scipy import stats

def analyze_and_plot_degree_distribution(G, network_name="Network"):

    degrees = [G.degree(n) for n in G.nodes()]
    avg_degree = np.mean(degrees)
    num_nodes = G.number_of_nodes()

    deg, cnt = np.unique(degrees, return_counts=True)

    # --- Set up the Plots ---
    fig, axes = plt.subplots(1, 2, figsize=(16, 7))
    fig.suptitle(f'Degree Distribution Analysis for {network_name}', fontsize=16)




    # --- Plot 1: Linear Scale Histogram ---
    ax0 = axes[0]
    ax0.bar(deg, cnt, width=0.80, color="b")
    ax0.axvline(avg_degree, color='r', linestyle='--', linewidth=2, label=f'Avg. Degree: {avg_degree:.2f}')
    ax0.set_title("Degree Histogram (Linear Scale)")
    ax0.set_xlabel("Degree (k)")
    ax0.set_ylabel("Number of Nodes")
    ax0.legend()

    # --- Plot 2: Log-Log Scale with Fits ---
    ax1 = axes[1]
    ax1.loglog(deg, cnt, 'o', color='b', label='Actual Distribution')
    ax1.axvline(avg_degree, color='r', linestyle='--', linewidth=2, label=f'Avg. Degree: {avg_degree:.2f}')

    # Power-law fit
    log_deg = np.log10(deg)
    log_cnt = np.log10(cnt)
    valid_indices = np.isfinite(log_deg) & np.isfinite(log_cnt)

    if len(log_deg[valid_indices]) > 1: # Need at least 2 points to fit a line
        slope, intercept, _, _, _ = stats.linregress(log_deg[valid_indices], log_cnt[valid_indices])
        gamma = -slope
        power_law_fit = (10**intercept) * (np.array(deg)**slope)
        ax1.loglog(deg, power_law_fit, '--', color='g', label=f'Power-Law Fit (γ ≈ {gamma:.2f})')

    # Exponential fit for comparison
    exp_lambda = 1.0 / avg_degree
    exponential_fit = num_nodes * exp_lambda * np.exp(-exp_lambda * np.array(deg))
    ax1.loglog(deg, exponential_fit, '--', color='orange', label='Exponential Fit')

    ax1.set_title("Degree Distribution (Log-Log Scale)")
    ax1.set_xlabel("Degree (k) - Log Scale")
    ax1.set_ylabel("Count - Log Scale")
    ax1.legend()

    plt.tight_layout(rect=[0, 0.03, 1, 0.95])
    plt.show()


analyze_and_plot_degree_distribution(G)